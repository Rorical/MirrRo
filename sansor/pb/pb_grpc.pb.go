// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sansor_TextReview_FullMethodName = "/pb.Sansor/TextReview"
)

// SansorClient is the client API for Sansor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SansorClient interface {
	TextReview(ctx context.Context, in *TextReviewRequest, opts ...grpc.CallOption) (*TextReviewResponse, error)
}

type sansorClient struct {
	cc grpc.ClientConnInterface
}

func NewSansorClient(cc grpc.ClientConnInterface) SansorClient {
	return &sansorClient{cc}
}

func (c *sansorClient) TextReview(ctx context.Context, in *TextReviewRequest, opts ...grpc.CallOption) (*TextReviewResponse, error) {
	out := new(TextReviewResponse)
	err := c.cc.Invoke(ctx, Sansor_TextReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SansorServer is the server API for Sansor service.
// All implementations must embed UnimplementedSansorServer
// for forward compatibility
type SansorServer interface {
	TextReview(context.Context, *TextReviewRequest) (*TextReviewResponse, error)
	mustEmbedUnimplementedSansorServer()
}

// UnimplementedSansorServer must be embedded to have forward compatible implementations.
type UnimplementedSansorServer struct {
}

func (UnimplementedSansorServer) TextReview(context.Context, *TextReviewRequest) (*TextReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextReview not implemented")
}
func (UnimplementedSansorServer) mustEmbedUnimplementedSansorServer() {}

// UnsafeSansorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SansorServer will
// result in compilation errors.
type UnsafeSansorServer interface {
	mustEmbedUnimplementedSansorServer()
}

func RegisterSansorServer(s grpc.ServiceRegistrar, srv SansorServer) {
	s.RegisterService(&Sansor_ServiceDesc, srv)
}

func _Sansor_TextReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SansorServer).TextReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sansor_TextReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SansorServer).TextReview(ctx, req.(*TextReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sansor_ServiceDesc is the grpc.ServiceDesc for Sansor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sansor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sansor",
	HandlerType: (*SansorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextReview",
			Handler:    _Sansor_TextReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}
